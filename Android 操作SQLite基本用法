http://blog.csdn.net/codeeer/article/details/30237597


在Android开发中SQLite起着很重要的作用，网上SQLite的教程有很多很多，不过那些教程大多数都讲得不是很全面。本人总结了一些SQLite的常用的方法，借着论坛的大赛，跟大家分享分享的。

一.SQLite的介绍

1.SQLite简介

SQLite是一款轻型的数据库，是遵守ACID的关联式数据库管理系统，它的设计目标是嵌入  式的，而且目前已经在很多嵌入式产品中使用了它，它占用资源非常的低，在嵌入式设备中，可能只需要几百K的内存就够了。它能够支持 Windows/Linux/Unix等等主流的操作系统，同时能够跟很多程序语言相结合，比如Tcl、PHP、Java、C++、.Net等，还有ODBC接口，同样比起 Mysql、PostgreSQL这两款开源世界著名的数据库管理系统来讲，它的处理速度比他们都快。

2.SQLite的特点：


轻量级


SQLite和C/S模式的数据库软件不同，它是进程内的数据库引擎，因此不存在数据库的客户端和服务器。使用SQLite一般只需要带上它的一个动态  库，就可以享受它的全部功能。而且那个动态库的尺寸也挺小，以版本3.6.11为例，Windows下487KB、Linux下347KB。


不需要"安装"


SQLite的核心引擎本身不依赖第三方的软件，使用它也不需要"安装"。有点类似那种绿色软件。


单一文件  


数据库中所有的信息（比如表、视图等）都包含在一个文件内。这个文件可以自由复制到其它目录或其它机器上。


跨平台/可移植性


除了主流操作系统 windows，linux之后，SQLite还支持其它一些不常用的操作系统。


弱类型的字段


同一列中的数据可以是不同类型


开源


这个相信大家都懂的！！！！！！！！！！！！

3.SQLite数据类型

一般数据采用的固定的静态数据类型，而SQLite采用的是动态数据类型，会根据存入值自动判断。SQLite具有以下五种常用的数据类型：

NULL: 这个值为空值

VARCHAR(n)：长度不固定且其最大长度为 n 的字串，n不能超过 4000。

CHAR(n)：长度固定为n的字串，n不能超过 254。

INTEGER: 值被标识为整数,依据值的大小可以依次被存储为1,2,3,4,5,6,7,8.

REAL: 所有值都是浮动的数值,被存储为8字节的IEEE浮动标记序号.

TEXT: 值为文本字符串,使用数据库编码存储(TUTF-8, UTF-16BE or UTF-16-LE).

BLOB: 值是BLOB数据块，以输入的数据格式进行存储。如何输入就如何存储,不改  变格式。

DATA ：包含了 年份、月份、日期。

TIME： 包含了 小时、分钟、秒。

相信学过数据库的童鞋对这些数据类型都不陌生的!!!!!!!!!!

二.SQLiteDatabase的介绍

Android提供了创建和是用SQLite数据库的API。SQLiteDatabase代表一个数据库对象，提供了操作数据库的一些方法。在Android的SDK目录下有sqlite3工具，我们可以利用它创建数据库、创建表和执行一些SQL语句。下面是SQLiteDatabase的常用方法。 

SQLiteDatabase的常用方法 
方法名称
方法表示含义
openOrCreateDatabase(String path,SQLiteDatabase.CursorFactory  factory)
打开或创建数据库
insert(String table,String nullColumnHack,ContentValues  values)
插入一条记录
delete(String table,String whereClause,String[]  whereArgs)
删除一条记录
query(String table,String[] columns,String selection,String[]  selectionArgs,String groupBy,String having,String  orderBy)
查询一条记录
update(String table,ContentValues values,String whereClause,String[]  whereArgs)
修改记录
execSQL(String sql)
执行一条SQL语句
close()
关闭数据库

Google公司命名这些方法的名称都是非常形象的。例如openOrCreateDatabase,我们从字面英文含义就能看出这是个打开或创建数据库的方法。




1、打开或者创建数据库

在Android 中使用SQLiteDatabase的静态方法openOrCreateDatabase(String  path,SQLiteDatabae.CursorFactory  factory)打开或者创建一个数据库。它会自动去检测是否存在这个数据库，如果存在则打开，不存在则创建一个数据库；创建成功则返回一个SQLiteDatabase对象，否则抛出异常FileNotFoundException。

下面是创建名为“stu.db”数据库的代码：
openOrCreateDatabase(String  path,SQLiteDatabae.CursorFactory  factory)
参数1  数据库创建的路径
参数2  一般设置为null就可以了
[sql] view plain copy print?在CODE上查看代码片派生到我的代码片
db=SQLiteDatabase.openOrCreateDatabase("/data/data/com.lingdududu.db/databases/stu.db",null);  

2、创建表

创建一张表的步骤很简单：

编写创建表的SQL语句
调用SQLiteDatabase的execSQL()方法来执行SQL语句


下面的代码创建了一张用户表，属性列为：id（主键并且自动增加）、sname（学生姓名）、snumber（学号）
[sql] view plain copy print?在CODE上查看代码片派生到我的代码片
private void createTable(SQLiteDatabase db){   
//创建表SQL语句   
String stu_table="create table usertable(_id integer primary key autoincrement,sname text,snumber text)";   
//执行SQL语句   
db.execSQL(stu_table);   
}  

3、插入数据
插入数据有两种方法：
①SQLiteDatabase的insert(String table,String nullColumnHack,ContentValues  values)方法，
  参数1  表名称，
  参数2  空列的默认值
  参数3  ContentValues类型的一个封装了列名称和列值的Map；
②编写插入数据的SQL语句，直接调用SQLiteDatabase的execSQL()方法来执行
第一种方法的代码：
[sql] view plain copy print?在CODE上查看代码片派生到我的代码片
private void insert(SQLiteDatabase db){   
//实例化常量值   
ContentValues cValue = new ContentValues();   
//添加用户名   
cValue.put("sname","xiaoming");   
//添加密码   
cValue.put("snumber","01005");   
//调用insert()方法插入数据   
db.insert("stu_table",null,cValue);   
}   

第二种方法的代码：
[sql] view plain copy print?在CODE上查看代码片派生到我的代码片
private void insert(SQLiteDatabase db){   
//插入数据SQL语句   
String stu_sql="insert into stu_table(sname,snumber) values('xiaoming','01005')";   
//执行SQL语句   
db.execSQL(sql);   
}   

4、删除数据

删除数据也有两种方法：

①调用SQLiteDatabase的delete(String table,String whereClause,String[]  whereArgs)方法
参数1  表名称 
参数2  删除条件
参数3  删除条件值数组

②编写删除SQL语句，调用SQLiteDatabase的execSQL()方法来执行删除。

第一种方法的代码：
[sql] view plain copy print?在CODE上查看代码片派生到我的代码片
private void delete(SQLiteDatabase db) {   
//删除条件   
String whereClause = "id=?";   
//删除条件参数   
String[] whereArgs = {String.valueOf(2)};   
//执行删除   
db.delete("stu_table",whereClause,whereArgs);   
}   

第二种方法的代码：
[sql] view plain copy print?在CODE上查看代码片派生到我的代码片
private void delete(SQLiteDatabase db) {   
//删除SQL语句   
String sql = "delete from stu_table where _id = 6";   
//执行SQL语句   
db.execSQL(sql);   
}   

5、修改数据

修改数据有两种方法：

①调用SQLiteDatabase的update(String table,ContentValues values,String  whereClause, String[]  whereArgs)方法
参数1  表名称
参数2  跟行列ContentValues类型的键值对Key-Value
参数3  更新条件（where字句）
参数4  更新条件数组

②编写更新的SQL语句，调用SQLiteDatabase的execSQL执行更新。

第一种方法的代码：
[sql] view plain copy print?在CODE上查看代码片派生到我的代码片
private void update(SQLiteDatabase db) {   
//实例化内容值 ContentValues values = new ContentValues();   
//在values中添加内容   
values.put("snumber","101003");   
//修改条件   
String whereClause = "id=?";   
//修改添加参数   
String[] whereArgs={String.valuesOf(1)};   
//修改   
db.update("usertable",values,whereClause,whereArgs);   
}   

第二种方法的代码：
[sql] view plain copy print?在CODE上查看代码片派生到我的代码片
private void update(SQLiteDatabase db){   
//修改SQL语句   
String sql = "update stu_table set snumber = 654321 where id = 1";   
//执行SQL   
db.execSQL(sql);   
}   

6、查询数据

在Android中查询数据是通过Cursor类来实现的，当我们使用SQLiteDatabase.query()方法时，会得到一个Cursor对象，Cursor指向的就是每一条数据。它提供了很多有关查询的方法，具体方法如下：

public  Cursor query(String table,String[] columns,String selection,String[]  selectionArgs,String groupBy,String having,String orderBy,String limit);

各个参数的意义说明：

参数table:表名称

参数columns:列名称数组

参数selection:条件字句，相当于where

参数selectionArgs:条件字句，参数数组

参数groupBy:分组列

参数having:分组条件

参数orderBy:排序列

参数limit:分页查询限制

参数Cursor:返回值，相当于结果集ResultSet

Cursor是一个游标接口，提供了遍历查询结果的方法，如移动指针方法move()，获得列值方法getString()等.

Cursor游标常用方法

方法名称
方法描述
getCount()
获得总的数据项数
isFirst()
判断是否第一条记录
isLast()
判断是否最后一条记录
moveToFirst()
移动到第一条记录
moveToLast()
移动到最后一条记录
move(int offset)
移动到指定记录
moveToNext()
移动到下一条记录
moveToPrevious()
移动到上一条记录
getColumnIndexOrThrow(String  columnName)
根据列名称获得列索引
getInt(int columnIndex)
获得指定列索引的int类型值
getString(int columnIndex)
获得指定列缩影的String类型值

下面就是用Cursor来查询数据库中的数据，具体代码如下：
[sql] view plain copy print?在CODE上查看代码片派生到我的代码片
private void query(SQLiteDatabase db) {   
//查询获得游标   
Cursor cursor = db.query ("usertable",null,null,null,null,null,null);   
  
//判断游标是否为空   
if(cursor.moveToFirst() {   
//遍历游标   
for(int i=0;i<cursor.getCount();i++){   
cursor.move(i);   
//获得ID   
int id = cursor.getInt(0);   
//获得用户名   
String username=cursor.getString(1);   
//获得密码   
String password=cursor.getString(2);   
//输出用户信息 System.out.println(id+":"+sname+":"+snumber);   
}   
}   
}  

7、删除指定表
编写插入数据的SQL语句，直接调用SQLiteDatabase的execSQL()方法来执行
[java] view plain copy print?在CODE上查看代码片派生到我的代码片
private void drop(SQLiteDatabase db){   
//删除表的SQL语句   
String sql ="DROP TABLE stu_table";   
//执行SQL   
db.execSQL(sql);   
}   

三. SQLiteOpenHelper
该类是SQLiteDatabase一个辅助类。这个类主要生成一  个数据库，并对数据库的版本进行管理。当在程序当中调用这个类的方法getWritableDatabase()或者 getReadableDatabase()方法的时候，如果当时没有数据，那么Android系统就会自动生成一个数据库。 SQLiteOpenHelper 是一个抽象类，我们通常需要继承它，并且实现里面的3个函数：

1.onCreate（SQLiteDatabase）

在数据库第一次生成的时候会调用这个方法，也就是说，只有在创建数据库的时候才会调用，当然也有一些其它的情况，一般我们在这个方法里边生成数据库表。

2.  onUpgrade（SQLiteDatabase，int，int） 
当数据库需要升级的时候，Android系统会主动的调用这个方法。一般我们在这个方法里边删除数据表，并建立新的数据表，当然是否还需要做其他的操作，完全取决于应用的需求。

3.  onOpen（SQLiteDatabase）：

这是当打开数据库时的回调函数，一般在程序中不是很常使用。

写了这么多，改用用实际例子来说明上面的内容了。下面这个操作数据库的实例实现了创建数据库，创建表以及数据库的增删改查的操作。
该实例有两个类：
com.lingdududu.testSQLite 调试类
com.lingdududu.testSQLiteDb  数据库辅助类

SQLiteActivity.java
[java] view plain copy print?在CODE上查看代码片派生到我的代码片
package com.lingdududu.testSQLite;  
  
import com.lingdududu.testSQLiteDb.StuDBHelper;  
  
import android.app.Activity;  
import android.content.ContentValues;  
import android.database.Cursor;  
import android.database.sqlite.SQLiteDatabase;  
import android.os.Bundle;  
import android.view.View;  
import android.view.View.OnClickListener;  
import android.widget.Button;  
/* 
* @author lingdududu 
*/  
public class SQLiteActivity extends Activity {  
/** Called when the activity is first created. */  
//声明各个按钮  
private Button createBtn;  
private Button insertBtn;  
private Button updateBtn;  
private Button queryBtn;  
private Button deleteBtn;  
private Button ModifyBtn;  
@Override  
public void onCreate(Bundle savedInstanceState) {  
super.onCreate(savedInstanceState);  
setContentView(R.layout.main);  
  
//调用creatView方法  
creatView();  
//setListener方法  
setListener();   
}  
  
//通过findViewById获得Button对象的方法  
private void creatView(){  
createBtn = (Button)findViewById(R.id.createDatabase);  
updateBtn = (Button)findViewById(R.id.updateDatabase);  
insertBtn = (Button)findViewById(R.id.insert);  
ModifyBtn = (Button)findViewById(R.id.update);  
queryBtn = (Button)findViewById(R.id.query);  
deleteBtn = (Button)findViewById(R.id.delete);  
}  
  
//为按钮注册监听的方法  
private void setListener(){  
createBtn.setOnClickListener(new CreateListener());  
updateBtn.setOnClickListener(new UpdateListener());  
insertBtn.setOnClickListener(new InsertListener());  
ModifyBtn.setOnClickListener(new ModifyListener());  
queryBtn.setOnClickListener(new QueryListener());  
deleteBtn.setOnClickListener(new DeleteListener());  
}  
  
//创建数据库的方法  
class CreateListener implements OnClickListener{  
  
@Override  
public void onClick(View v) {  
//创建StuDBHelper对象  
StuDBHelper dbHelper = new StuDBHelper(SQLiteActivity.this,"stu_db",null,1);  
//得到一个可读的SQLiteDatabase对象  
SQLiteDatabase db =dbHelper.getReadableDatabase();  
}   
}  
  
//更新数据库的方法  
class UpdateListener implements OnClickListener{  
  
@Override  
public void onClick(View v) {  
// 数据库版本的更新,由原来的1变为2  
StuDBHelper dbHelper = new StuDBHelper(SQLiteActivity.this,"stu_db",null,2);  
SQLiteDatabase db =dbHelper.getReadableDatabase();  
}   
}  
  
//插入数据的方法  
class InsertListener implements OnClickListener{  
  
@Override  
public void onClick(View v) {  
  
StuDBHelper dbHelper = new StuDBHelper(SQLiteActivity.this,"stu_db",null,1);  
//得到一个可写的数据库  
SQLiteDatabase db =dbHelper.getWritableDatabase();  
  
//生成ContentValues对象 //key:列名，value:想插入的值   
ContentValues cv = new ContentValues();  
//往ContentValues对象存放数据，键-值对模式  
cv.put("id", 1);  
cv.put("sname", "xiaoming");  
cv.put("sage", 21);  
cv.put("ssex", "male");  
//调用insert方法，将数据插入数据库  
db.insert("stu_table", null, cv);  
//关闭数据库  
db.close();  
}   
}  
  
//查询数据的方法  
class QueryListener implements OnClickListener{  
  
@Override  
public void onClick(View v) {  
  
StuDBHelper dbHelper = new StuDBHelper(SQLiteActivity.this,"stu_db",null,1);  
//得到一个可写的数据库  
SQLiteDatabase db =dbHelper.getReadableDatabase();  
//参数1：表名   
//参数2：要想显示的列   
//参数3：where子句   
//参数4：where子句对应的条件值   
//参数5：分组方式   
//参数6：having条件   
//参数7：排序方式   
Cursor cursor = db.query("stu_table", new String[]{"id","sname","sage","ssex"}, "id=?", new String[]{"1"}, null, null, null);  
while(cursor.moveToNext()){  
String name = cursor.getString(cursor.getColumnIndex("sname"));  
String age = cursor.getString(cursor.getColumnIndex("sage"));  
String sex = cursor.getString(cursor.getColumnIndex("ssex"));  
System.out.println("query------->" + "姓名："+name+" "+"年龄："+age+" "+"性别："+sex);  
}  
//关闭数据库  
db.close();  
}   
}  
  
//修改数据的方法  
class ModifyListener implements OnClickListener{  
  
@Override  
public void onClick(View v) {  
  
StuDBHelper dbHelper = new StuDBHelper(SQLiteActivity.this,"stu_db",null,1);  
//得到一个可写的数据库  
SQLiteDatabase db =dbHelper.getWritableDatabase();  
ContentValues cv = new ContentValues();  
cv.put("sage", "23");  
//where 子句 "?"是占位符号，对应后面的"1",  
String whereClause="id=?";  
String [] whereArgs = {String.valueOf(1)};  
//参数1 是要更新的表名  
//参数2 是一个ContentValeus对象  
//参数3 是where子句  
db.update("stu_table", cv, whereClause, whereArgs);  
}  
}  
  
//删除数据的方法  
class DeleteListener implements OnClickListener{  
  
@Override  
public void onClick(View v) {  
  
StuDBHelper dbHelper = new StuDBHelper(SQLiteActivity.this,"stu_db",null,1);  
//得到一个可写的数据库  
SQLiteDatabase db =dbHelper.getReadableDatabase();  
String whereClauses = "id=?";  
String [] whereArgs = {String.valueOf(2)};  
//调用delete方法，删除数据   
db.delete("stu_table", whereClauses, whereArgs);  
}   
}  
}  

StuDBHelper.java
[java] view plain copy print?在CODE上查看代码片派生到我的代码片
package com.lingdududu.testSQLiteDb;  
  
import android.content.Context;  
import android.database.sqlite.SQLiteDatabase;  
import android.database.sqlite.SQLiteDatabase.CursorFactory;  
import android.database.sqlite.SQLiteOpenHelper;  
import android.util.Log;  
  
public class StuDBHelper extends SQLiteOpenHelper {  
  
private static final String TAG = "TestSQLite";  
public static final int VERSION = 1;  
  
//必须要有构造函数  
public StuDBHelper(Context context, String name, CursorFactory factory,  
int version) {  
super(context, name, factory, version);  
}  
  
// 当第一次创建数据库的时候，调用该方法   
public void onCreate(SQLiteDatabase db) {  
String sql = "create table stu_table(id int,sname varchar(20),sage int,ssex varchar(10))";  
//输出创建数据库的日志信息  
Log.i(TAG, "create Database------------->");  
//execSQL函数用于执行SQL语句  
db.execSQL(sql);  
}  
  
//当更新数据库的时候执行该方法  
public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {  
//输出更新数据库的日志信息  
Log.i(TAG, "update Database------------->");  
}  
}  

main.xml
[java] view plain copy print?在CODE上查看代码片派生到我的代码片
<?xml version="1.0" encoding="utf-8"?>  
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"  
android:orientation="vertical"  
android:layout_width="fill_parent"  
android:layout_height="fill_parent"  
>  
<TextView   
android:layout_width="fill_parent"   
android:layout_height="wrap_content"   
android:text="@string/hello"  
/>  
<Button  
android:id="@+id/createDatabase"  
android:layout_width="fill_parent"   
android:layout_height="wrap_content"   
android:text="创建数据库"  
/>   
<Button  
android:id="@+id/updateDatabase"  
android:layout_width="fill_parent"   
android:layout_height="wrap_content"   
android:text="更新数据库"  
/>   
<Button  
android:id="@+id/insert"  
android:layout_width="fill_parent"   
android:layout_height="wrap_content"   
android:text="插入数据"  
/>  
<Button  
android:id="@+id/update"  
android:layout_width="fill_parent"   
android:layout_height="wrap_content"   
android:text="更新数据"  
/>  
<Button  
android:id="@+id/query"  
android:layout_width="fill_parent"   
android:layout_height="wrap_content"   
android:text="查询数据"  
/>  
<Button  
android:id="@+id/delete"  
android:layout_width="fill_parent"   
android:layout_height="wrap_content"   
android:text="删除数据"  
/>  
</LinearLayout>  

程序运行的效果图：

使用adb命令查看数据库：

1.在命令行窗口输入adb  shell回车，就进入了Linux命令行，现在就可以使用Linux的命令了。

2.ls回车，显示所有的东西，其中有个data。

3.cd data回车，再ls回车，cd  data回车，ls回车后就会看到很多的com................，那就是系统上的应用程序包名，找到你数据库程序的包名，然后进入。

4.进去后在查看所有，会看到有databases,进入databases，显示所有就会发现你的数据库名字，这里使用的是"stu_db"。

5.sqlite3 stu_db回车就进入了你的数据库了，然后“.schema”就会看到该应用程序的所有表及建表语句。

6.之后就可以使用标准的SQL语句查看刚才生成的数据库及对数据执行增删改查了。
注：ls,cd等命令都是linux的基本命令，不了解的同学可以看看有关这方面的资料。

下面介绍几个在SQLite中常用到的adb命令：

查看
.database 显示数据库信息；
.tables 显示表名称；
.schema 命令可以查看创建数据表时的SQL命令；
.schema table_name 查看创建表table_name时的SQL的命令；

插入记录
insert into table_name values (field1, field2, field3...);

查询
select * from table_name;查看table_name表中所有记录；
select * from table_name where field1='xxxxx'; 查询符合指定条件的记录；

删除
drop table_name;     删除表；
drop index_name;     删除索引；
-------------------------------------------查询，插入，删除等操作数据库的语句记得不要漏了;----------------------------------------

# sqlite3 stu_db
sqlite3 stu_db
SQLite version 3.6.22
Enter  ".help" for instructions
Enter SQL statements terminated with a  ";"
sqlite> .schema
.schema
CREATE TABLE  android_metadata (locale TEXT);
CREATE TABLE stu_table(id int,sname varchar(20),sage int,ssex  varchar(10));  --->创建的表
sqlite> select * from stu_table;
select * from  stu_table;
1|xiaoming|21|male
sqlite>

插入数据

sqlite> insert into stu_table  values(2,'xiaohong',20,'female');

插入的数据记得要和表中的属性一一对应
insert into stu_table  values(2,'xiaohong',20,'female');
sqlite> select * from  stu_table;
select * from  stu_table;
1|xiaoming|21|male
2|xiaohong|20|female   --------------> 插入的数据
sqlite>

当点击修改数据的按钮时候

sqlite> select * from stu_table;
select * from  stu_table;
1|xiaoming|23|male  -------------->年龄被修改为23
2|xiaohong|20|female
sqlite>


当点击删除数据的按钮

sqlite> select * from stu_table;
select * from  stu_table;
1|xiaoming|23|male        id=2的数据已经被删除

总之，我们可以在代码中执行数据库的增删改查，也可以在adb命令行下实现。不过因为SQLite没有客户端，不能直接的查看数据库变化后的信息，所以常用adb命令行查看数据库改变后的信息。
